//apply plugin: 'maven'
//apply plugin: 'signing'
//
//def sonatypeRepositoryUrl
//if (isReleaseBuild()) {
//    println 'RELEASE BUILD'
//    sonatypeRepositoryUrl = hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
//            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
//} else {
//    println 'DEBUG BUILD'
//    sonatypeRepositoryUrl = hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
//            : "https://oss.sonatype.org/content/repositories/snapshots/"
//}
//
//def getRepositoryUsername() {
//    return hasProperty('nexusUsername') ? nexusUsername : ""
//}
//
//def getRepositoryPassword() {
//    return hasProperty('nexusPassword') ? nexusPassword : ""
//}
//
//afterEvaluate { project ->
//    uploadArchives {
//        repositories {
//            mavenDeployer {
//                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
//
//                pom.artifactId = POM_ARTIFACT_ID
//
//                repository(url: sonatypeRepositoryUrl) {
//                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
//                }
//
//                pom.project {
//                    name POM_NAME
//                    packaging POM_PACKAGING
//                    description POM_DESCRIPTION
//                    url POM_URL
//
//                    scm {
//                        url POM_SCM_URL
//                        connection POM_SCM_CONNECTION
//                        developerConnection POM_SCM_DEV_CONNECTION
//                    }
//
//                    licenses {
//                        license {
//                            name POM_LICENCE_NAME
//                            url POM_LICENCE_URL
//                            distribution POM_LICENCE_DIST
//                        }
//                    }
//
//                    developers {
//                        developer {
//                            id POM_DEVELOPER_ID
//                            name POM_DEVELOPER_NAME
//                        }
//                    }
//                }
//            }
//        }
//    }
//
//    signing {
//        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
//        sign configurations.archives
//    }
//
//    task androidJavadocs(type: Javadoc) {
//        source = android.sourceSets.main.java.sourceFiles
//    }
//
//    task androidJavadocsJar(type: Jar) {
//        classifier = 'javadoc'
//        //basename = artifact_id
//        from androidJavadocs.destinationDir
//    }
//
//    task androidSourcesJar(type: Jar) {
//        classifier = 'sources'
//        //basename = artifact_id
//        from android.sourceSets.main.java.sourceFiles
//    }
//
//    artifacts {
//        //archives packageReleaseJar
//        archives androidSourcesJar
//        archives androidJavadocsJar
//    }
//}

apply plugin: 'maven-publish'
apply plugin: 'signing'

def sonatypeRepositoryUrl
if (isReleaseBuild()) {
    println 'RELEASE BUILD'
    sonatypeRepositoryUrl = hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
} else {
    println 'DEBUG BUILD'
    sonatypeRepositoryUrl = hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('nexusUsername') ? nexusUsername : ""
}

def getRepositoryPassword() {
    return hasProperty('nexusPassword') ? nexusPassword : ""
}


tasks.register('androidJavadocs', Javadoc) {
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath())
}

tasks.register('androidJavadocsJar', Jar) {
    archiveClassifier.set("javadoc")
    //basename = artifact_id
    from tasks.named('androidJavadocs').get().destinationDir
}

tasks.register('androidSourcesJar', Jar) {
    archiveClassifier.set("sources")
    //basename = artifact_id
    from android.sourceSets.main.java.sourceFiles
}

publishing {
    repositories {
        maven {
            url = sonatypeRepositoryUrl
            credentials {
                username = getRepositoryUsername()
                password = getRepositoryPassword()
            }
        }
    }
    publications {
        maven(MavenPublication) {
            afterEvaluate { project ->
                def releaseComponent = components.findByName('release')
                if (releaseComponent) {
                    from releaseComponent
                }
                artifact tasks.named("bundleReleaseAar")
                artifact tasks.named('androidSourcesJar').get()
                artifact tasks.named('androidJavadocsJar').get()
                version = project.version
            }

            pom {
                name = POM_NAME
                packaging = POM_PACKAGING
                description = POM_DESCRIPTION
                url = POM_URL
                scm {
                    url = POM_SCM_URL
                    connection = POM_SCM_CONNECTION
                    developerConnection = POM_SCM_DEV_CONNECTION
                }

                licenses {
                    license {
                        name = POM_LICENCE_NAME
                        url = POM_LICENCE_URL
                        distribution = POM_LICENCE_DIST
                    }
                }

                developers {
                    developer {
                        id = POM_DEVELOPER_ID
                        name = POM_DEVELOPER_NAME
                    }
                }
            }
        }
    }
}


signing {
    required { isReleaseBuild() && gradle.taskGraph.hasTask("publishing") }
    sign publishing.publications.maven
}

